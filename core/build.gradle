/*
 * Copyright 2018 Medallia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 *     http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
ext {
    jdkVersion = JavaVersion.current().isJava8() ? 'jdk8' : 'jdk9'
}

dependencies {

    // Commons library
    compile 'commons-io:commons-io:2.6'

    // SL4J for logging
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Jackson for JSON and YAML
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.9.4'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.4'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.4'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.4'

    // Guava, JUnit and Mockito for unit tests
    testCompile 'com.google.guava:guava:21.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

// from http://central.sonatype.org/pages/gradle.html
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, sourceJar // add javadocJar
}

signing {
    sign configurations.archives
}

def sonatypeUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : System.getenv('sonatypeUsername')
def sonatypePassword = project.hasProperty('sonatypePassword') ? sonatypePassword : System.getenv('sonatypePassword')

publishing {
    publications {
        mavenCore(MavenPublication) {
            pom.withXml {
                def root = asNode()

                root.dependencies.removeAll { dep ->
                    dep.scope == "test"
                }

                root.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    description 'Framework for Feature Flags and Runtime Configuration'
                    name 'Merci'
                    url 'https://github.com/medallia/merci'
                    organization {
                        name 'com.github.medallia'
                        url 'https://github.com/medallia'
                    }
                    issueManagement {
                        system 'GitHub'
                        url 'https://github.com/medallia/merci/issues'
                    }
                    licenses {
                        license {
                            name 'Apache License 2.0'
                            url 'https://github.com/medallia/merci/blob/master/LICENSE'
                            distribution 'repo'
                        }
                    }
                    scm {
                        url 'https://github.com/medallia/merci'
                        connection 'scm:git:git://github.com/medallia/merci.git'
                        developerConnection 'scm:git:ssh://git@github.com:medallia/merci.git'
                    }
                    developers {
                        developer {
                            id 'lichtsinn'
                            name 'Mario H. Lichtsinn'
                            email 'lichtsinn@gmail.com'
                        }
                    }
                }
            }

            groupId 'com.medallia.merci'
            artifactId 'merci-core'
            version version
            from components.java

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }

            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-?(?<classifier>sources|javadoc)?\.(?<extension>jar|tar|zip)\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group('classifier')
                        extension = matcher.group('extension') + '.asc'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }

    model {
        tasks.generatePomFileForMavenCorePublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenCorePublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenCorePublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}

