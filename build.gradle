/*
 * Copyright 2018 Medallia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 *     http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {

    repositories {
        mavenCentral()
        repositories {
            mavenCentral()
        }
    }

    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.5.2'
        classpath 'com.netflix.nebula:nebula-release-plugin:6.3.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2'
        classpath 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    }
}

plugins {
    id "com.github.spotbugs" version "1.6.1"
    id 'nebula.release' version '6.3.0'
}

subprojects {
    apply plugin: 'java'

    // checks
    apply plugin: "jacoco"
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'checkstyle'

    apply plugin: 'com.diffplug.gradle.spotless'

    // plugin to generate pom and publish it with artifacts to a repository, i.e. Maven Central
    apply plugin: 'maven-publish'

    // plugin to sign pom and artifacts
    apply plugin: 'signing'

    repositories {
        repositories {
            mavenCentral()
        }
    }

    nebulaRelease {
        version.inferredVersion = new org.ajoberstar.gradle.git.release.base.ReleaseVersion(
                version.toString().replace('+', '-'),
                version.inferredVersion.previousVersion,
                version.inferredVersion.createTag)
        println "Modified inferred version: ${version}"
    }

    // SPOTBUGS
    spotbugs {
        toolVersion = "3.1.1"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/spotbugsReports")
        effort = "max"
        reportLevel = "low"
        includeFilter = file("$rootProject.projectDir/spotbugs/includeFilter.xml")
        excludeFilter = file("$rootProject.projectDir/spotbugs/excludeFilter.xml")
        excludeBugsFilter = file("$rootProject.projectDir/spotbugs/excludeBugsFilter.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    // PMD
    pmd {
        toolVersion = "6.1.0"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/pmdReports")
        ruleSets = []
        ruleSetFiles = files("${rootProject.projectDir}/pmd/pmd-ruleset.xml")
    }

    // CHECKSTLYE
    checkstyle {
        toolVersion = "8.12"
        configFile = file("${project.rootDir}/checkstyle/checkstyle.xml")

        dependencies {
            checkstyle project(':checkstyle-checks')
        }
    }

    // JACOCO
    jacoco {
        toolVersion = "0.7.7.201606060606"
    }

    jacocoTestReport {
        reports {
            csv.enabled false
            xml.enabled false
            html.enabled true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                excludes = [ 'com.medallia.merci.web.JettyRunner', 'com.medallia.merci.web.JettyRunner.*' ]
                limit {
                    counter = "LINE"
                    minimum = 0.00
                }
            }
            rule {
                element = 'CLASS'
                excludes = [ 'com.medallia.merci.web.JettyRunner', 'com.medallia.merci.web.JettyRunner.*' ]
                limit {
                    counter = "BRANCH"
                    minimum = 0.00
                }
            }
        }
    }

    test.finalizedBy jacocoTestReport
    jacocoTestReport.finalizedBy jacocoTestCoverageVerification

    apply plugin: 'com.diffplug.gradle.spotless'
}
